# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais (para o luiz otavio)
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
# Abstractmethod √© um tipo de dado que pode ser variadas coisas
# quando abstrato pode se ter um "pre padr√£o" para este tipo de dado
# na qual quando chamado o abstractmethod executa tal logica que influencia
# seu tipo, assim tendo uma caracteristica
# Exemplo: notifica√ß√£o, pode ser notifica√ß√£o sms, email, mensagem, liga√ß√µes, etc...
# abstractmethod entra em a√ß√£o pois sabe que √© um dado do tipo abstrato por√©m
# sem uma denifini√ß√£o concreta de que tipo √© esse dado, com isso se da para definir logicas

from abc import ABC, abstractmethod

class Notificacao(ABC):
    def __init__(self, mensagem) -> None:
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool:
        ...

class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print('E-mail: enviando -', self.mensagem)
        return True

class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print('SMS: enviando -', self.mensagem)
        return False

# n = NotificacaoSMS('Testando notifica√ß√£o')
# n.enviar()

def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o n√£o enviada')

notificacao_email = NotificacaoEmail('Testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('Testando SMS')
notificar(notificacao_sms)

     