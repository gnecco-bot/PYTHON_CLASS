# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø
# assim de vez colocar () para executar o m√©todo
# pode se utilizar apenas o nome, parecer√° que trabalhar√°
# como atributo mas ir√° est√° trabalhando com m√©todo
# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente ex: mudar atributo no programa do cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo

class Caneta:
    def __init__(self, cor):
        self.cor_tinta = cor

    @property
    def cor(self):
        print('PROPERTY')
        return self.cor_tinta
    
    @property
    def cor_tampa(self):
        return 123456

caneta = Caneta('Azul')
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor_tampa)
print(caneta.cor_tampa)

#####################################

# class Caneta:
#     def __init__(self, cor):
#         self.cor_tinta = cor
#         # self.cor = cor
    
#     def get_cor(self):
#         return self.cor_tinta

# caneta = Caneta('Azul')
# # print(caneta.cor)
# # print(caneta.cor)
# # print(caneta.cor)
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
